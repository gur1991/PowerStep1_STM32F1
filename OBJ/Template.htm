<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Aug 26 16:10:33 2019
<BR><P>
<H3>Maximum Stack Usage =        648 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; protocol_handle_uart_powerstep01_plain_slave_cmd &rArr; Gradient_control_buffer &rArr; protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c7]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[47]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">BusFault_Handler</a><BR>
 <LI><a href="#[45]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">HardFault_Handler</a><BR>
 <LI><a href="#[46]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">MemManage_Handler</a><BR>
 <LI><a href="#[48]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">UsageFault_Handler</a><BR>
 <LI><a href="#[19d]">usmart_strcmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19d]">usmart_strcmp</a><BR>
 <LI><a href="#[1a6]">usmart_strcopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a6]">usmart_strcopy</a><BR>
 <LI><a href="#[1a2]">usmart_search_nextc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a2]">usmart_search_nextc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5f]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7c]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[62]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[63]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[58]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[59]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[85]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[86]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[87]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[88]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">DS18B20_Init</a> from ds18b20.o(i.DS18B20_Init) referenced 2 times from keep_temperature.o(.data)
 <LI><a href="#[4a]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[53]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[75]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[54]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[55]">EXTI2_IRQHandler</a> from stm32f1xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[56]">EXTI3_IRQHandler</a> from stm32f1xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[57]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[64]">EXTI9_5_IRQHandler</a> from stm32f1xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[51]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7d]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">GetTemperatureDegree</a> from keep_temperature.o(i.GetTemperatureDegree) referenced 2 times from keep_temperature.o(.data)
 <LI><a href="#[45]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6d]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6c]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6f]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6e]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">KeepTemperatureDegree</a> from keep_temperature.o(i.KeepTemperatureDegree) referenced 2 times from keep_temperature.o(.data)
 <LI><a href="#[46]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4e]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">Powerstep01_AttachBusyInterrupt</a> from powerstep01.o(i.Powerstep01_AttachBusyInterrupt) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[6]">Powerstep01_AttachErrorHandler</a> from powerstep01.o(i.Powerstep01_AttachErrorHandler) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[7]">Powerstep01_AttachFlagInterrupt</a> from powerstep01.o(i.Powerstep01_AttachFlagInterrupt) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[30]">Powerstep01_BusyInterruptHandler</a> from powerstep01.o(i.Powerstep01_BusyInterruptHandler) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1e]">Powerstep01_CheckBusyHw</a> from powerstep01.o(i.Powerstep01_CheckBusyHw) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1f]">Powerstep01_CheckStatusHw</a> from powerstep01.o(i.Powerstep01_CheckStatusHw) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[15]">Powerstep01_CmdGetParam</a> from powerstep01.o(i.Powerstep01_CmdGetParam) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[16]">Powerstep01_CmdGetStatus</a> from powerstep01.o(i.Powerstep01_CmdGetStatus) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[d]">Powerstep01_CmdGoHome</a> from powerstep01.o(i.Powerstep01_CmdGoHome) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[e]">Powerstep01_CmdGoMark</a> from powerstep01.o(i.Powerstep01_CmdGoMark) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[f]">Powerstep01_CmdGoTo</a> from powerstep01.o(i.Powerstep01_CmdGoTo) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1d]">Powerstep01_CmdGoToDir</a> from powerstep01.o(i.Powerstep01_CmdGoToDir) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[20]">Powerstep01_CmdGoUntil</a> from powerstep01.o(i.Powerstep01_CmdGoUntil) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[21]">Powerstep01_CmdHardHiZ</a> from powerstep01.o(i.Powerstep01_CmdHardHiZ) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[10]">Powerstep01_CmdHardStop</a> from powerstep01.o(i.Powerstep01_CmdHardStop) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[11]">Powerstep01_CmdMove</a> from powerstep01.o(i.Powerstep01_CmdMove) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[17]">Powerstep01_CmdNop</a> from powerstep01.o(i.Powerstep01_CmdNop) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[22]">Powerstep01_CmdReleaseSw</a> from powerstep01.o(i.Powerstep01_CmdReleaseSw) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[23]">Powerstep01_CmdResetDevice</a> from powerstep01.o(i.Powerstep01_CmdResetDevice) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[24]">Powerstep01_CmdResetPos</a> from powerstep01.o(i.Powerstep01_CmdResetPos) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[25]">Powerstep01_CmdRun</a> from powerstep01.o(i.Powerstep01_CmdRun) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[18]">Powerstep01_CmdSetParam</a> from powerstep01.o(i.Powerstep01_CmdSetParam) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[26]">Powerstep01_CmdSoftHiZ</a> from powerstep01.o(i.Powerstep01_CmdSoftHiZ) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[31]">Powerstep01_CmdSoftStop</a> from powerstep01.o(i.Powerstep01_CmdSoftStop) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[27]">Powerstep01_CmdStepClock</a> from powerstep01.o(i.Powerstep01_CmdStepClock) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2f]">Powerstep01_ErrorHandler</a> from powerstep01.o(i.Powerstep01_ErrorHandler) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[28]">Powerstep01_FetchAndClearAllStatus</a> from powerstep01.o(i.Powerstep01_FetchAndClearAllStatus) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[9]">Powerstep01_FlagInterruptHandler</a> from powerstep01.o(i.Powerstep01_FlagInterruptHandler) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[36]">Powerstep01_GetAnalogValue</a> from powerstep01.o(i.Powerstep01_GetAnalogValue) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[29]">Powerstep01_GetFetchedStatus</a> from powerstep01.o(i.Powerstep01_GetFetchedStatus) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[a]">Powerstep01_GetFwVersion</a> from powerstep01.o(i.Powerstep01_GetFwVersion) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[b]">Powerstep01_GetMark</a> from powerstep01.o(i.Powerstep01_GetMark) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2a]">Powerstep01_GetNbDevices</a> from powerstep01.o(i.Powerstep01_GetNbDevices) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[c]">Powerstep01_GetPosition</a> from powerstep01.o(i.Powerstep01_GetPosition) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[4]">Powerstep01_Init</a> from powerstep01.o(i.Powerstep01_Init) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2b]">Powerstep01_IsDeviceBusy</a> from powerstep01.o(i.Powerstep01_IsDeviceBusy) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2d]">Powerstep01_QueueCommands</a> from powerstep01.o(i.Powerstep01_QueueCommands) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[5]">Powerstep01_ReadId</a> from powerstep01.o(i.Powerstep01_ReadId) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[19]">Powerstep01_ReadStatusRegister</a> from powerstep01.o(i.Powerstep01_ReadStatusRegister) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1a]">Powerstep01_ReleaseReset</a> from powerstep01.o(i.Powerstep01_ReleaseReset) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1b]">Powerstep01_Reset</a> from powerstep01.o(i.Powerstep01_Reset) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1c]">Powerstep01_SelectStepMode</a> from powerstep01.o(i.Powerstep01_SelectStepMode) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2c]">Powerstep01_SendQueuedCommands</a> from powerstep01.o(i.Powerstep01_SendQueuedCommands) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[35]">Powerstep01_SetAnalogValue</a> from powerstep01.o(i.Powerstep01_SetAnalogValue) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[12]">Powerstep01_SetHome</a> from powerstep01.o(i.Powerstep01_SetHome) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[13]">Powerstep01_SetMark</a> from powerstep01.o(i.Powerstep01_SetMark) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[34]">Powerstep01_SetNbDevices</a> from powerstep01.o(i.Powerstep01_SetNbDevices) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[32]">Powerstep01_StartStepClock</a> from powerstep01.o(i.Powerstep01_StartStepClock) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[33]">Powerstep01_StopStepClock</a> from powerstep01.o(i.Powerstep01_StopStepClock) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2e]">Powerstep01_WaitForAllDevicesNotBusy</a> from powerstep01.o(i.Powerstep01_WaitForAllDevicesNotBusy) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[14]">Powerstep01_WaitWhileActive</a> from powerstep01.o(i.Powerstep01_WaitWhileActive) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[52]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[76]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[50]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7e]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[70]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[71]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[80]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">SetTemperatureDegree</a> from keep_temperature.o(i.SetTemperatureDegree) referenced 2 times from keep_temperature.o(.data)
 <LI><a href="#[4c]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[89]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[4f]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[65]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[68]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[67]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[66]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[69]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6a]">TIM3_IRQHandler</a> from stm32f1xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6b]">TIM4_IRQHandler</a> from usmart.o(i.TIM4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7f]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[83]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[84]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[78]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7b]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[79]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8d]">UART2_Receive_Data</a> from uart2.o(i.UART2_Receive_Data) referenced from uart_choose.o(i.GetUartReceive)
 <LI><a href="#[8f]">UART2_Send_Data</a> from uart2.o(i.UART2_Send_Data) referenced from uart_choose.o(i.GetUartSend)
 <LI><a href="#[8e]">UART3_Receive_Data</a> from uart3.o(i.UART3_Receive_Data) referenced from uart_choose.o(i.GetUartReceive)
 <LI><a href="#[90]">UART3_Send_Data</a> from uart3.o(i.UART3_Send_Data) referenced from uart_choose.o(i.GetUartSend)
 <LI><a href="#[81]">UART4_IRQHandler</a> from uart4.o(i.UART4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[82]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[72]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[73]">USART2_IRQHandler</a> from uart2.o(i.USART2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[74]">USART3_IRQHandler</a> from uart3.o(i.USART3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[77]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[60]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[61]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[91]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[8c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3d]">delay_ms</a> from delay.o(i.delay_ms) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[3e]">delay_us</a> from delay.o(i.delay_us) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[8b]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[3b]">read_addr</a> from usmart.o(i.read_addr) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[40]">usmart_cmd_rec</a> from usmart.o(i.usmart_cmd_rec) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[41]">usmart_exe</a> from usmart.o(i.usmart_exe) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[3f]">usmart_init</a> from usmart.o(i.usmart_init) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[42]">usmart_scan</a> from usmart.o(i.usmart_scan) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[3c]">write_addr</a> from usmart.o(i.write_addr) referenced 2 times from usmart_config.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[91]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[92]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[94]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1c0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c2]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c3]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[95]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b7]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[97]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[99]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[9c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1c5]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1db]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1dc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1dd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1de]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1df]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1e0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1e1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[93]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1e2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a4]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a6]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1e3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a8]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; protocol_handle_uart_powerstep01_plain_slave_cmd &rArr; Gradient_control_buffer &rArr; protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1e4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ab]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1e5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[43]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e6]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Single_Motor_Config
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump_s100_transfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cheminert_c52_c55_transfer
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pump_s100_interface
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cheminert_c52_c55
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[b2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b3]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b1]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[98]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9b]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1e7]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_Little_Endian_Convert
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cheminert_c52_c55_transfer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cheminert_c52_c55
</UL>

<P><STRONG><a name="[b8]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_device
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f4]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c3]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[9f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[b0]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a1]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bf]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[c2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[bb]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c5]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1f5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[aa]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1aa]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[bc]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[c9]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[cb]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[cc]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[bd]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[ce]"></a>AD_Sensor_Get_Data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, spi1.o(i.AD_Sensor_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD_Sensor_Get_Data &rArr; SPI1_Transfer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weight_sensor_value
</UL>

<P><STRONG><a name="[d0]"></a>BSP_MotorControl_BusyInterruptHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_BusyInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[d2]"></a>BSP_MotorControl_CmdGetParam</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_CmdGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MotorControl_CmdGetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[d3]"></a>BSP_MotorControl_CmdResetPos</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_CmdResetPos))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[d4]"></a>BSP_MotorControl_CmdSetParam</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_CmdSetParam))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[d1]"></a>BSP_MotorControl_ErrorHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_ErrorHandler))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_FlagInterruptHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_BusyInterruptHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetMark
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SelectStepMode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_HardStop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_GetPosition
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_CmdSetParam
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_CmdResetPos
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_CmdGetParam
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_WaitWhileActive
</UL>

<P><STRONG><a name="[d5]"></a>BSP_MotorControl_FlagInterruptHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_FlagInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[d6]"></a>BSP_MotorControl_GetPosition</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_GetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MotorControl_GetPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[d7]"></a>BSP_MotorControl_HardStop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_HardStop))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopALLMotorMotion
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckNextPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckLeftPosition
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveTowardWaitPosition
</UL>

<P><STRONG><a name="[d8]"></a>BSP_MotorControl_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_Init))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[d9]"></a>BSP_MotorControl_Move</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_Move))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Motor_Slow_Spin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckNextPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckLeftPosition
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move_And_Wait
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveTowardWaitPosition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckWaitPosition
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckBlankPosition
</UL>

<P><STRONG><a name="[da]"></a>BSP_MotorControl_SelectStepMode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_SelectStepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MotorControl_SelectStepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[db]"></a>BSP_MotorControl_SetMark</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_SetMark))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[dc]"></a>BSP_MotorControl_SetNbDevices</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_SetNbDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_MotorControl_SetNbDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetMotorHandle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l648x_GetMotorHandle
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l647x_GetMotorHandle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stspin240_250_GetMotorHandle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stspin220_GetMotorHandle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L6474_GetMotorHandle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L6208_GetMotorHandle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L6206_GetMotorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[e5]"></a>BSP_MotorControl_WaitWhileActive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_WaitWhileActive))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Motor_Slow_Spin
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckLeftPosition
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move_And_Wait
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckWaitPosition
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckBlankPosition
</UL>

<P><STRONG><a name="[e6]"></a>BSP_Motor_Control_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, step01.o(i.BSP_Motor_Control_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = BSP_Motor_Control_Init &rArr; Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_device
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMotorAllDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>Balance_Chromatographic_Column</STRONG> (Thumb, 46 bytes, Stack size 80 bytes, slave_uart_control_interface.o(i.Balance_Chromatographic_Column))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Balance_Chromatographic_Column &rArr; protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_FlowSpeed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cheminert_c52_c55
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[ef]"></a>Big_Little_Endian_Convert</STRONG> (Thumb, 40 bytes, Stack size 136 bytes, pump_s100.o(i.Big_Little_Endian_Convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Big_Little_Endian_Convert
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump_s100_transfer
</UL>

<P><STRONG><a name="[47]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>CRC_Digital_Convert_Get</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, pump_s100.o(i.CRC_Digital_Convert_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Digital_Convert_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump_s100_transfer
</UL>

<P><STRONG><a name="[f1]"></a>Choose_Single_Motor_Speed_Config</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, step01.o(i.Choose_Single_Motor_Speed_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Choose_Single_Motor_Speed_Config &rArr; Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_device
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMotorAllDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Motor_Slow_Spin
</UL>

<P><STRONG><a name="[f2]"></a>ClearAndCheckBlankPosition</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, factory_many.o(i.ClearAndCheckBlankPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ClearAndCheckBlankPosition &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_WaitWhileActive
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[f4]"></a>ClearAndCheckWaitPosition</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, factory_many.o(i.ClearAndCheckWaitPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ClearAndCheckWaitPosition &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_WaitWhileActive
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[e7]"></a>ConfigMotorAllDevice</STRONG> (Thumb, 266 bytes, Stack size 36 bytes, step01.o(i.ConfigMotorAllDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ConfigMotorAllDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choose_Single_Motor_Speed_Config
</UL>

<P><STRONG><a name="[f5]"></a>DS18B20_Check</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20_Check &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[f6]"></a>DS18B20_Get_Temp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DS18B20_Get_Temp &rArr; DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepTemperatureDegree
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureDegree
</UL>

<P><STRONG><a name="[37]"></a>DS18B20_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ds18b20.o(i.DS18B20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS18B20_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keep_temperature.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>DS18B20_Read_Bit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
</UL>

<P><STRONG><a name="[fa]"></a>DS18B20_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS18B20_Read_Byte &rArr; DS18B20_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[f8]"></a>DS18B20_Rst</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20_Rst &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[f7]"></a>DS18B20_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[f9]"></a>DS18B20_Write_Byte</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ds18b20.o(i.DS18B20_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS18B20_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[4a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>First_Open_Motor_AutoCheck</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, factory_many.o(i.First_Open_Motor_AutoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = First_Open_Motor_AutoCheck &rArr; RestAllMotorOrgin &rArr; Rest_Transporter_Belt &rArr; RestSelectMotorOrgin &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestAllMotorOrgin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move_And_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[38]"></a>GetTemperatureDegree</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keep_temperature.o(i.GetTemperatureDegree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetTemperatureDegree &rArr; DS18B20_Get_Temp &rArr; DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rearch_Degree_Wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keep_temperature.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>GetUartReceive</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart_choose.o(i.GetUartReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetUartReceive &rArr; Uart_Select_Baby &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Select_Baby
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump_s100_transfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cheminert_c52_c55_transfer
</UL>

<P><STRONG><a name="[107]"></a>GetUartSend</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart_choose.o(i.GetUartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetUartSend &rArr; Uart_Select_Baby &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Select_Baby
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump_s100_transfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cheminert_c52_c55_transfer
</UL>

<P><STRONG><a name="[108]"></a>Get_All_Weight_Sensor_Warnning_Result</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, weight.o(i.Get_All_Weight_Sensor_Warnning_Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Get_All_Weight_Sensor_Warnning_Result &rArr; Get_Single_Weight_Sensor_Warnning_Result &rArr; get_weight_sensor_value &rArr; AD_Sensor_Get_Data &rArr; SPI1_Transfer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Single_Weight_Sensor_Warnning_Result
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[109]"></a>Get_Single_Weight_Sensor_Warnning_Result</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, weight.o(i.Get_Single_Weight_Sensor_Warnning_Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Get_Single_Weight_Sensor_Warnning_Result &rArr; get_weight_sensor_value &rArr; AD_Sensor_Get_Data &rArr; SPI1_Transfer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weight_sensor_value
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_All_Weight_Sensor_Warnning_Result
</UL>

<P><STRONG><a name="[10b]"></a>Get_weight_current_gram</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, weight.o(i.Get_weight_current_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Get_weight_current_gram &rArr; get_weight_sensor_value &rArr; AD_Sensor_Get_Data &rArr; SPI1_Transfer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weight_sensor_value
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[10d]"></a>Gradient_control_buffer</STRONG> (Thumb, 188 bytes, Stack size 96 bytes, slave_uart_control_interface.o(i.Gradient_control_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Gradient_control_buffer &rArr; protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cheminert_c52_c55
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electromagnetic_control
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[10f]"></a>Gravity_Sensor_Setting</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, slave_uart_control_interface.o(i.Gravity_Sensor_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Gravity_Sensor_Setting &rArr; Set_Weight_Sensor_Warnning_Line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Weight_Sensor_Warnning_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[111]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Delay
</UL>

<P><STRONG><a name="[113]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_msp.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_FlagInterruptHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_BusyInterruptHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_FLAG_PIN_GetState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_BUSY_PIN_GetState
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get_All
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get
</UL>

<P><STRONG><a name="[14e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiWriteBytes
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Reset
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_ReleaseReset_All
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_ReleaseReset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Reset_All
</UL>

<P><STRONG><a name="[112]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[187]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[114]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[117]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[18f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[18e]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StartStepClock
</UL>

<P><STRONG><a name="[11e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1402 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiInit
</UL>

<P><STRONG><a name="[120]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiWriteBytes
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[194]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[119]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[18a]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StartStepClock
</UL>

<P><STRONG><a name="[130]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StopStepClock
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>HAL_UART_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_UART_MspInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13a]"></a>HAL_UART_Receive</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[13c]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Send_Data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Send_Data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send_Data
</UL>

<P><STRONG><a name="[134]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[45]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>KeepTemperatureDegree</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, keep_temperature.o(i.KeepTemperatureDegree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = KeepTemperatureDegree &rArr; DS18B20_Get_Temp &rArr; DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetTIM3Compare4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keep_temperature.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>L6206_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.L6206_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[e1]"></a>L6208_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.L6208_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[dd]"></a>L6474_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.L6474_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[13e]"></a>LeftMoveTowardWaitPosition</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, factory_many.o(i.LeftMoveTowardWaitPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LeftMoveTowardWaitPosition &rArr; RestSelectMotorOrgin &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_HardStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[f3]"></a>Light_Sensor_Get</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, light.o(i.Light_Sensor_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Light_Sensor_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckNextPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckLeftPosition
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveTowardWaitPosition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckWaitPosition
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckBlankPosition
</UL>

<P><STRONG><a name="[140]"></a>Light_Sensor_Get_All</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, light.o(i.Light_Sensor_Get_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Light_Sensor_Get_All
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[141]"></a>Light_Sensor_Init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, light.o(i.Light_Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Light_Sensor_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>Motor_Move_And_Wait</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, factory_many.o(i.Motor_Move_And_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Motor_Move_And_Wait &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_WaitWhileActive
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Open_Motor_AutoCheck
</UL>

<P><STRONG><a name="[44]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>PowerStep_Select_Motor_Baby</STRONG> (Thumb, 262 bytes, Stack size 36 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.PowerStep_Select_Motor_Baby))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PowerStep_Select_Motor_Baby
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopALLMotorMotion
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Single_Motor_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choose_Single_Motor_Speed_Config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Motor_Slow_Spin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckNextPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckLeftPosition
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move_And_Wait
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveTowardWaitPosition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckWaitPosition
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckBlankPosition
</UL>

<P><STRONG><a name="[142]"></a>Powerstep01_AccDec_RegVal_to_Steps_s2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_AccDec_RegVal_to_Steps_s2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_AccDec_RegVal_to_Steps_s2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[145]"></a>Powerstep01_AccDec_Steps_s2_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_AccDec_Steps_s2_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_AccDec_Steps_s2_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[8]"></a>Powerstep01_AttachBusyInterrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_AttachBusyInterrupt))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Powerstep01_AttachErrorHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_AttachErrorHandler))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Powerstep01_AttachFlagInterrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_AttachFlagInterrupt))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[148]"></a>Powerstep01_BEMFslope_Perc_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_BEMFslope_Perc_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_BEMFslope_Perc_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[149]"></a>Powerstep01_BEMFslope_RegVal_to_Perc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_BEMFslope_RegVal_to_Perc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_BEMFslope_RegVal_to_Perc &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[14a]"></a>Powerstep01_Board_BUSY_PIN_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_BUSY_PIN_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CheckBusyHw
</UL>

<P><STRONG><a name="[14b]"></a>Powerstep01_Board_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_Board_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init
</UL>

<P><STRONG><a name="[158]"></a>Powerstep01_Board_DisableIrq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_DisableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetStatus
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>

<P><STRONG><a name="[157]"></a>Powerstep01_Board_EnableIrq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetStatus
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>

<P><STRONG><a name="[14c]"></a>Powerstep01_Board_FLAG_PIN_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_FLAG_PIN_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CheckStatusHw
</UL>

<P><STRONG><a name="[14d]"></a>Powerstep01_Board_GpioInit</STRONG> (Thumb, 796 bytes, Stack size 56 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Powerstep01_Board_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Reset_All
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init
</UL>

<P><STRONG><a name="[150]"></a>Powerstep01_Board_ReleaseReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_ReleaseReset))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ReleaseReset
</UL>

<P><STRONG><a name="[151]"></a>Powerstep01_Board_ReleaseReset_All</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_ReleaseReset_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_Board_ReleaseReset_All
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init
</UL>

<P><STRONG><a name="[152]"></a>Powerstep01_Board_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Reset
</UL>

<P><STRONG><a name="[14f]"></a>Powerstep01_Board_Reset_All</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_Reset_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_Board_Reset_All
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
</UL>

<P><STRONG><a name="[153]"></a>Powerstep01_Board_SpiInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Powerstep01_Board_SpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init
</UL>

<P><STRONG><a name="[154]"></a>Powerstep01_Board_SpiWriteBytes</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_SpiWriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>

<P><STRONG><a name="[155]"></a>Powerstep01_Board_StartStepClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_StartStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Powerstep01_Board_StartStepClock &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StartStepClock
</UL>

<P><STRONG><a name="[156]"></a>Powerstep01_Board_StopStepClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_StopStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_Board_StopStepClock &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StopStepClock
</UL>

<P><STRONG><a name="[30]"></a>Powerstep01_BusyInterruptHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_BusyInterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_BusyInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>Powerstep01_CheckBusyHw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_CheckBusyHw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_CheckBusyHw
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_BUSY_PIN_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>Powerstep01_CheckStatusHw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_CheckStatusHw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_CheckStatusHw
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_FLAG_PIN_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Powerstep01_CmdGetParam</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, powerstep01.o(i.Powerstep01_CmdGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_EnableIrq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_DisableIrq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetHome
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SelectStepMode
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ReadStatusRegister
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetPosition
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetMark
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Powerstep01_CmdGetStatus</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, powerstep01.o(i.Powerstep01_CmdGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Powerstep01_CmdGetStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_EnableIrq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_DisableIrq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IsDeviceBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Powerstep01_CmdGoHome</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoHome &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Powerstep01_CmdGoMark</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoMark &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Powerstep01_CmdGoTo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoTo &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>Powerstep01_CmdGoToDir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoToDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoToDir &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>Powerstep01_CmdGoUntil</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoUntil &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Powerstep01_CmdHardHiZ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdHardHiZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdHardHiZ &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SelectStepMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Powerstep01_CmdHardStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdHardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdHardStop &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Powerstep01_CmdMove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdMove &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>Powerstep01_CmdNop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdNop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdNop &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>Powerstep01_CmdReleaseSw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdReleaseSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdReleaseSw &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>Powerstep01_CmdResetDevice</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdResetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdResetDevice &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>Powerstep01_CmdResetPos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdResetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdResetPos &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SelectStepMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>Powerstep01_CmdRun</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdRun &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>Powerstep01_CmdSetParam</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, powerstep01.o(i.Powerstep01_CmdSetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_EnableIrq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_DisableIrq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetMark
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetHome
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SelectStepMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>Powerstep01_CmdSoftHiZ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdSoftHiZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdSoftHiZ &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>Powerstep01_CmdSoftStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdSoftStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdSoftStop &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>Powerstep01_CmdStepClock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdStepClock &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[15d]"></a>Powerstep01_ConvertPosition</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_ConvertPosition))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetPosition
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetMark
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[2f]"></a>Powerstep01_ErrorHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_ErrorHandler))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[15b]"></a>Powerstep01_FSSpd_RegVal_to_Steps_s</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_FSSpd_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_FSSpd_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[15c]"></a>Powerstep01_FSSpd_Steps_s_to_RegVal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_FSSpd_Steps_s_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_FSSpd_Steps_s_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[28]"></a>Powerstep01_FetchAndClearAllStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_FetchAndClearAllStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Powerstep01_FetchAndClearAllStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Powerstep01_FlagInterruptHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_FlagInterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_FlagInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>Powerstep01_GetAnalogValue</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_GetAnalogValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Powerstep01_GetAnalogValue &rArr; Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RegVal_to_RefVoltage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_RegVal_to_Time
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_RegVal_to_Th
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Speed_RegVal_to_Steps_s
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_RegVal_to_Steps_s
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_RegVal_to_Steps_s
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_RegVal_to_Perc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_RegVal_to_Comp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_RegVal_to_Steps_s
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_RegVal_to_Steps_s
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ConvertPosition
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_RegVal_to_Perc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_RegVal_to_Steps_s2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>Powerstep01_GetFetchedStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_GetFetchedStatus))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Powerstep01_GetFwVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_GetFwVersion))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Powerstep01_GetMark</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_GetMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Powerstep01_GetMark &rArr; Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ConvertPosition
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>Powerstep01_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[2a]"></a>Powerstep01_GetNbDevices</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_GetNbDevices))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Powerstep01_GetPosition</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_GetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Powerstep01_GetPosition &rArr; Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ConvertPosition
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Powerstep01_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Powerstep01_Init &rArr; Powerstep01_Board_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_ReleaseReset_All
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>Powerstep01_Init_Register</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Init_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FetchAndClearAllStatus
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdHardHiZ
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Single_Motor_Config
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choose_Single_Motor_Speed_Config
</UL>

<P><STRONG><a name="[162]"></a>Powerstep01_IntSpd_RegVal_to_Steps_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_IntSpd_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_IntSpd_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[16a]"></a>Powerstep01_IntSpd_Steps_s_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_IntSpd_Steps_s_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_IntSpd_Steps_s_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[2b]"></a>Powerstep01_IsDeviceBusy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_IsDeviceBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Powerstep01_IsDeviceBusy &rArr; Powerstep01_CmdGetStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WaitWhileActive
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WaitForAllDevicesNotBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[16b]"></a>Powerstep01_KTherm_Comp_to_RegVal</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_KTherm_Comp_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_KTherm_Comp_to_RegVal &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[163]"></a>Powerstep01_KTherm_RegVal_to_Comp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_KTherm_RegVal_to_Comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_KTherm_RegVal_to_Comp &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[16e]"></a>Powerstep01_Kval_Perc_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Kval_Perc_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_Kval_Perc_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[165]"></a>Powerstep01_Kval_RegVal_to_Perc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Kval_RegVal_to_Perc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_Kval_RegVal_to_Perc &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[160]"></a>Powerstep01_MaxSpd_RegVal_to_Steps_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_MaxSpd_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_MaxSpd_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[16f]"></a>Powerstep01_MaxSpd_Steps_s_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_MaxSpd_Steps_s_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_MaxSpd_Steps_s_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[161]"></a>Powerstep01_MinSpd_RegVal_to_Steps_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_MinSpd_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_MinSpd_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[170]"></a>Powerstep01_MinSpd_Steps_s_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_MinSpd_Steps_s_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_MinSpd_Steps_s_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[2d]"></a>Powerstep01_QueueCommands</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_QueueCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_QueueCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Powerstep01_ReadId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_ReadId))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Powerstep01_ReadStatusRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Powerstep01_ReadStatusRegister &rArr; Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>Powerstep01_ReleaseReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_ReleaseReset))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_ReleaseReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>Powerstep01_Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Powerstep01_SelectStepMode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_SelectStepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Powerstep01_SelectStepMode &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdResetPos
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdHardHiZ
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[15a]"></a>Powerstep01_SendCommand</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, powerstep01.o(i.Powerstep01_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_EnableIrq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_DisableIrq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdStepClock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSoftStop
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSoftHiZ
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdRun
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdResetPos
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdResetDevice
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdReleaseSw
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdNop
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdMove
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdHardStop
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdHardHiZ
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoUntil
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoToDir
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoTo
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoMark
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoHome
</UL>

<P><STRONG><a name="[2c]"></a>Powerstep01_SendQueuedCommands</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_SendQueuedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Powerstep01_SendQueuedCommands &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>Powerstep01_SetAnalogValue</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, powerstep01.o(i.Powerstep01_SetAnalogValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Powerstep01_SetAnalogValue &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[168]"></a>Powerstep01_SetDeviceParamsToGivenValues</STRONG> (Thumb, 570 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_SetDeviceParamsToGivenValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Powerstep01_SetDeviceParamsToGivenValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
</UL>

<P><STRONG><a name="[12]"></a>Powerstep01_SetHome</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_SetHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Powerstep01_SetHome &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Powerstep01_SetMark</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_SetMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_SetMark &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>Powerstep01_SetNbDevices</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_SetNbDevices))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[169]"></a>Powerstep01_SetRegisterToPredefinedValues</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, powerstep01.o(i.Powerstep01_SetRegisterToPredefinedValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
</UL>

<P><STRONG><a name="[15f]"></a>Powerstep01_Speed_RegVal_to_Steps_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Speed_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_Speed_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[164]"></a>Powerstep01_StallOcd_RegVal_to_Th</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_StallOcd_RegVal_to_Th))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_StallOcd_RegVal_to_Th &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[172]"></a>Powerstep01_StallOcd_Th_to_RegVal</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_StallOcd_Th_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_StallOcd_Th_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[32]"></a>Powerstep01_StartStepClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_StartStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Powerstep01_StartStepClock &rArr; Powerstep01_Board_StartStepClock &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StartStepClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>Powerstep01_StopStepClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_StopStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_StopStepClock &rArr; Powerstep01_Board_StopStepClock &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StopStepClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>Powerstep01_Tmin_RegVal_to_Time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Tmin_RegVal_to_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_Tmin_RegVal_to_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[174]"></a>Powerstep01_Tmin_Time_to_RegVal</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Tmin_Time_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_Tmin_Time_to_RegVal &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[173]"></a>Powerstep01_Tval_RefVoltage_to_RegVal</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Tval_RefVoltage_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_Tval_RefVoltage_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[166]"></a>Powerstep01_Tval_RegVal_to_RefVoltage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Tval_RegVal_to_RefVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Powerstep01_Tval_RegVal_to_RefVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[2e]"></a>Powerstep01_WaitForAllDevicesNotBusy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_WaitForAllDevicesNotBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Powerstep01_WaitForAllDevicesNotBusy &rArr; Powerstep01_IsDeviceBusy &rArr; Powerstep01_CmdGetStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IsDeviceBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Powerstep01_WaitWhileActive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_WaitWhileActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_WaitWhileActive &rArr; Powerstep01_IsDeviceBusy &rArr; Powerstep01_CmdGetStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IsDeviceBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[159]"></a>Powerstep01_WriteBytes</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendQueuedCommands
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FetchAndClearAllStatus
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetStatus
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>

<P><STRONG><a name="[175]"></a>ReadyAndCheckLeftPosition</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, factory_many.o(i.ReadyAndCheckLeftPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ReadyAndCheckLeftPosition &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_HardStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_WaitWhileActive
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[176]"></a>ReadyAndCheckNextPosition</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, factory_many.o(i.ReadyAndCheckNextPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReadyAndCheckNextPosition &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_HardStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[177]"></a>Rearch_Degree_Wait</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, keep_temperature.o(i.Rearch_Degree_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Rearch_Degree_Wait &rArr; GetTemperatureDegree &rArr; DS18B20_Get_Temp &rArr; DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureDegree
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[102]"></a>RestAllMotorOrgin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, factory_many.o(i.RestAllMotorOrgin))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RestAllMotorOrgin &rArr; Rest_Transporter_Belt &rArr; RestSelectMotorOrgin &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_high_wheel
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_Transporter_Belt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_Drain_And_Wash_Motor_Orgin
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Open_Motor_AutoCheck
</UL>

<P><STRONG><a name="[104]"></a>RestSelectMotorOrgin</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, step01.o(i.RestSelectMotorOrgin))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RestSelectMotorOrgin &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_HardStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_high_wheel
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_Transporter_Belt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_Drain_And_Wash_Motor_Orgin
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveTowardWaitPosition
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Open_Motor_AutoCheck
</UL>

<P><STRONG><a name="[17c]"></a>Rest_C55_C52_Position</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, slave_uart_control_interface.o(i.Rest_C55_C52_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Rest_C55_C52_Position &rArr; protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cheminert_c52_c55
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[178]"></a>Rest_Drain_And_Wash_Motor_Orgin</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, factory_many.o(i.Rest_Drain_And_Wash_Motor_Orgin))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Rest_Drain_And_Wash_Motor_Orgin &rArr; RestSelectMotorOrgin &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestAllMotorOrgin
</UL>

<P><STRONG><a name="[179]"></a>Rest_Transporter_Belt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, factory_many.o(i.Rest_Transporter_Belt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Rest_Transporter_Belt &rArr; RestSelectMotorOrgin &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestAllMotorOrgin
</UL>

<P><STRONG><a name="[17a]"></a>Rest_high_wheel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, factory_many.o(i.Rest_high_wheel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Rest_high_wheel &rArr; RestSelectMotorOrgin &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestAllMotorOrgin
</UL>

<P><STRONG><a name="[17d]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi1.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[cf]"></a>SPI1_Transfer</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, spi1.o(i.SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI1_Transfer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_AD_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sensor_Get_Data
</UL>

<P><STRONG><a name="[49]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>Scan_Motor_Slow_Spin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, factory_many.o(i.Scan_Motor_Slow_Spin))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Scan_Motor_Slow_Spin &rArr; Choose_Single_Motor_Speed_Config &rArr; Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choose_Single_Motor_Speed_Config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_WaitWhileActive
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
</UL>

<P><STRONG><a name="[39]"></a>SetTemperatureDegree</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keep_temperature.o(i.SetTemperatureDegree))
<BR>[Address Reference Count : 1]<UL><LI> keep_temperature.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>Set_Pumps100_FlowSpeed</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, slave_uart_control_interface.o(i.Set_Pumps100_FlowSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Set_Pumps100_FlowSpeed &rArr; protocol_pump_s100_interface &rArr; pump_s100_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pump_s100_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Chromatographic_Column
</UL>

<P><STRONG><a name="[181]"></a>Set_Pumps100_MaxPress</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, slave_uart_control_interface.o(i.Set_Pumps100_MaxPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Set_Pumps100_MaxPress &rArr; protocol_pump_s100_interface &rArr; pump_s100_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pump_s100_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_Press
</UL>

<P><STRONG><a name="[182]"></a>Set_Pumps100_MinPress</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, slave_uart_control_interface.o(i.Set_Pumps100_MinPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Set_Pumps100_MinPress &rArr; protocol_pump_s100_interface &rArr; pump_s100_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pump_s100_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_Press
</UL>

<P><STRONG><a name="[183]"></a>Set_Pumps100_Press</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, slave_uart_control_interface.o(i.Set_Pumps100_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Set_Pumps100_Press &rArr; Set_Pumps100_MinPress &rArr; protocol_pump_s100_interface &rArr; pump_s100_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_MinPress
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_MaxPress
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[184]"></a>Set_Single_Motor_Config</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, step01.o(i.Set_Single_Motor_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Set_Single_Motor_Config &rArr; Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_device
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[110]"></a>Set_Weight_Sensor_Warnning_Line</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, weight.o(i.Set_Weight_Sensor_Warnning_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_Weight_Sensor_Warnning_Line &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Setting
</UL>

<P><STRONG><a name="[185]"></a>Stm32_Clock_Init</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>StopALLMotorMotion</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, step01.o(i.StopALLMotorMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StopALLMotorMotion &rArr; PowerStep_Select_Motor_Baby
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_HardStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[e2]"></a>Stspin220_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.Stspin220_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[e4]"></a>Stspin240_250_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.Stspin240_250_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[4c]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usmart.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_thermometer_degree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[12f]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
</UL>

<P><STRONG><a name="[13d]"></a>TIM_SetTIM3Compare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.TIM_SetTIM3Compare4))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeepTemperatureDegree
</UL>

<P><STRONG><a name="[189]"></a>Timer4_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usmart.o(i.Timer4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer4_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_init
</UL>

<P><STRONG><a name="[8d]"></a>UART2_Receive_Data</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, uart2.o(i.UART2_Receive_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART2_Receive_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_choose.o(i.GetUartReceive)
</UL>
<P><STRONG><a name="[8f]"></a>UART2_Send_Data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart2.o(i.UART2_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART2_Send_Data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_choose.o(i.GetUartSend)
</UL>
<P><STRONG><a name="[8e]"></a>UART3_Receive_Data</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, uart3.o(i.UART3_Receive_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART3_Receive_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_choose.o(i.GetUartReceive)
</UL>
<P><STRONG><a name="[90]"></a>UART3_Send_Data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart3.o(i.UART3_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART3_Send_Data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_choose.o(i.GetUartSend)
</UL>
<P><STRONG><a name="[81]"></a>UART4_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart4.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18b]"></a>UART4_Init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, uart4.o(i.UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>UART4_Receive_Data</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, uart4.o(i.UART4_Receive_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART4_Receive_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[18c]"></a>UART4_Send_Data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart4.o(i.UART4_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART4_Send_Data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[72]"></a>USART1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USART2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>USART3_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>Uart_Select_Baby</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, uart_choose.o(i.Uart_Select_Baby))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_Select_Baby &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartReceive
</UL>

<P><STRONG><a name="[48]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[b6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ae]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[192]"></a>cheminert_c52_c55_transfer</STRONG> (Thumb, 176 bytes, Stack size 104 bytes, cheminert_c52.o(i.cheminert_c52_c55_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cheminert_c52_c55
</UL>

<P><STRONG><a name="[193]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump_s100_transfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cheminert_c52_c55_transfer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gradient_control_buffer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Select_Baby
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rearch_Degree_Wait
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckNextPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckLeftPosition
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveTowardWaitPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[10e]"></a>electromagnetic_control</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, electromagnetic.o(i.electromagnetic_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = electromagnetic_control
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gradient_control_buffer
</UL>

<P><STRONG><a name="[8b]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>get_weight_sensor_value</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, weight.o(i.get_weight_sensor_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_weight_sensor_value &rArr; AD_Sensor_Get_Data &rArr; SPI1_Transfer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Sensor_Get_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_weight_current_gram
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Single_Weight_Sensor_Warnning_Result
</UL>

<P><STRONG><a name="[e8]"></a>init_motor_device</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, step01.o(i.init_motor_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_motor_device &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Single_Motor_Config
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choose_Single_Motor_Speed_Config
</UL>

<P><STRONG><a name="[188]"></a>keep_thermometer_degree</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time_interrupt.o(i.keep_thermometer_degree))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>l647x_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.l647x_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[e3]"></a>l648x_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.l648x_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[a9]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = main &rArr; protocol_handle_uart_powerstep01_plain_slave_cmd &rArr; Gradient_control_buffer &rArr; protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[197]"></a>process_motor_command_receive</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, factory_many.o(i.process_motor_command_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = process_motor_command_receive &rArr; Rest_C55_C52_Position &rArr; protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_C55_C52_Position
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rearch_Degree_Wait
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Motor_Slow_Spin
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_high_wheel
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_Transporter_Belt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_Drain_And_Wash_Motor_Orgin
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestAllMotorOrgin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckNextPosition
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadyAndCheckLeftPosition
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveTowardWaitPosition
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Open_Motor_AutoCheck
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckWaitPosition
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAndCheckBlankPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
</UL>

<P><STRONG><a name="[196]"></a>protocol_handle_uart_powerstep01_plain_slave_cmd</STRONG> (Thumb, 734 bytes, Stack size 184 bytes, slave_uart_control_interface.o(i.protocol_handle_uart_powerstep01_plain_slave_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = protocol_handle_uart_powerstep01_plain_slave_cmd &rArr; Gradient_control_buffer &rArr; protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetMark
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SelectStepMode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Move
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_HardStop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_GetPosition
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_CmdSetParam
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_CmdResetPos
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_CmdGetParam
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopALLMotorMotion
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Single_Motor_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Weight_Sensor_Warnning_Line
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_weight_current_gram
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Single_Weight_Sensor_Warnning_Result
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_All_Weight_Sensor_Warnning_Result
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get_All
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_WaitWhileActive
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_Press
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gravity_Sensor_Setting
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gradient_control_buffer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Chromatographic_Column
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pump_s100_interface
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cheminert_c52_c55
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electromagnetic_control
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send_Data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Receive_Data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command_receive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Move_And_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>pump_s100_transfer</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, pump_s100.o(i.pump_s100_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pump_s100_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Digital_Convert_Get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_Little_Endian_Convert
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartSend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_pump_s100_interface
</UL>

<P><STRONG><a name="[3b]"></a>read_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.read_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[195]"></a>uart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>usmart_cmd_rec</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, usmart.o(i.usmart_cmd_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>usmart_exe</STRONG> (Thumb, 510 bytes, Stack size 128 bytes, usmart.o(i.usmart_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = usmart_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_reset_runtime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_runtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1a3]"></a>usmart_get_aparm</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, usmart_str.o(i.usmart_get_aparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[1a9]"></a>usmart_get_cmdname</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usmart_str.o(i.usmart_get_cmdname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[19c]"></a>usmart_get_fname</STRONG> (Thumb, 352 bytes, Stack size 60 bytes, usmart_str.o(i.usmart_get_fname))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[19e]"></a>usmart_get_fparam</STRONG> (Thumb, 202 bytes, Stack size 240 bytes, usmart_str.o(i.usmart_get_fparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[19f]"></a>usmart_get_parmpos</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usmart_str.o(i.usmart_get_parmpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_parmpos
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[1a1]"></a>usmart_get_runtime</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usmart.o(i.usmart_get_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[3f]"></a>usmart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usmart.o(i.usmart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usmart_init &rArr; Timer4_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1a8]"></a>usmart_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_pow))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[1a0]"></a>usmart_reset_runtime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usmart.o(i.usmart_reset_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[42]"></a>usmart_scan</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usmart.o(i.usmart_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1a2]"></a>usmart_search_nextc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_search_nextc))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[1a4]"></a>usmart_str2num</STRONG> (Thumb, 214 bytes, Stack size 28 bytes, usmart_str.o(i.usmart_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[19d]"></a>usmart_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcmp))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[1a6]"></a>usmart_strcopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcopy))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[1a5]"></a>usmart_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[1a7]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 1458 bytes, Stack size 72 bytes, usmart.o(i.usmart_sys_cmd_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[3c]"></a>write_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.write_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_weight_current_gram
</UL>

<P><STRONG><a name="[1ab]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Weight_Sensor_Warnning_Line
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_weight_current_gram
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[1ae]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Weight_Sensor_Warnning_Line
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_weight_current_gram
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[1f7]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
</UL>

<P><STRONG><a name="[1f8]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestSelectMotorOrgin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Weight_Sensor_Warnning_Line
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[1af]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ad]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1ac]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Single_Motor_Config
</UL>

<P><STRONG><a name="[1b0]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_RegVal_to_Comp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_RegVal_to_Steps_s
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
</UL>

<P><STRONG><a name="[1b2]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1b5]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[1b9]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
</UL>

<P><STRONG><a name="[1b7]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[1f9]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[143]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RegVal_to_RefVoltage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_RegVal_to_Time
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_RegVal_to_Th
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Speed_RegVal_to_Steps_s
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_RegVal_to_Steps_s
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_RegVal_to_Steps_s
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_RegVal_to_Perc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_RegVal_to_Comp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_RegVal_to_Steps_s
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_RegVal_to_Steps_s
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_RegVal_to_Perc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_RegVal_to_Steps_s2
</UL>

<P><STRONG><a name="[1fa]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1fb]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[1b8]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1bc]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RegVal_to_RefVoltage
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_RegVal_to_Th
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Speed_RegVal_to_Steps_s
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_RegVal_to_Steps_s
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_RegVal_to_Steps_s
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_RegVal_to_Perc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_RegVal_to_Steps_s
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_RegVal_to_Steps_s
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_RegVal_to_Perc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_RegVal_to_Steps_s2
</UL>

<P><STRONG><a name="[1ba]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1b1]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1b4]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[1bb]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
</UL>

<P><STRONG><a name="[1bd]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[96]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1b6]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[16d]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_RegVal_to_Time
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_RegVal_to_Comp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
</UL>

<P><STRONG><a name="[1bf]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11b]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[132]"></a>UART_Receive_IT</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[133]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[122]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[17e]"></a>Set_AD_CS</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi1.o(i.Set_AD_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_AD_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[ed]"></a>protocol_cheminert_c52_c55</STRONG> (Thumb, 538 bytes, Stack size 120 bytes, slave_uart_control_interface.o(i.protocol_cheminert_c52_c55))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = protocol_cheminert_c52_c55 &rArr; cheminert_c52_c55_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cheminert_c52_c55_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gradient_control_buffer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Balance_Chromatographic_Column
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_C55_C52_Position
</UL>

<P><STRONG><a name="[180]"></a>protocol_pump_s100_interface</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, slave_uart_control_interface.o(i.protocol_pump_s100_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = protocol_pump_s100_interface &rArr; pump_s100_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pump_s100_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_uart_powerstep01_plain_slave_cmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_MinPress
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_MaxPress
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pumps100_FlowSpeed
</UL>

<P><STRONG><a name="[1be]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[1b3]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[ba]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[8c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Dec 23 18:40:37 2019
<BR><P>
<H3>Maximum Stack Usage =        364 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[57]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[3f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">BusFault_Handler</a><BR>
 <LI><a href="#[3d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">HardFault_Handler</a><BR>
 <LI><a href="#[3e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">MemManage_Handler</a><BR>
 <LI><a href="#[40]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">UsageFault_Handler</a><BR>
 <LI><a href="#[126]">usmart_strcmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[126]">usmart_strcmp</a><BR>
 <LI><a href="#[12f]">usmart_strcopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">usmart_strcopy</a><BR>
 <LI><a href="#[12b]">usmart_search_nextc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12b]">usmart_search_nextc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[57]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[74]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5a]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5b]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[50]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[51]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[52]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[53]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[54]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[55]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[56]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7d]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7e]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7f]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[80]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6d]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">EXTI2_IRQHandler</a> from stm32f1xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4e]">EXTI3_IRQHandler</a> from stm32f1xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4f]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5c]">EXTI9_5_IRQHandler</a> from stm32f1xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[75]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[65]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[64]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[67]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[66]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4]">Powerstep01_AttachBusyInterrupt</a> from powerstep01.o(i.Powerstep01_AttachBusyInterrupt) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2]">Powerstep01_AttachErrorHandler</a> from powerstep01.o(i.Powerstep01_AttachErrorHandler) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[3]">Powerstep01_AttachFlagInterrupt</a> from powerstep01.o(i.Powerstep01_AttachFlagInterrupt) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2c]">Powerstep01_BusyInterruptHandler</a> from powerstep01.o(i.Powerstep01_BusyInterruptHandler) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1a]">Powerstep01_CheckBusyHw</a> from powerstep01.o(i.Powerstep01_CheckBusyHw) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1b]">Powerstep01_CheckStatusHw</a> from powerstep01.o(i.Powerstep01_CheckStatusHw) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[11]">Powerstep01_CmdGetParam</a> from powerstep01.o(i.Powerstep01_CmdGetParam) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[12]">Powerstep01_CmdGetStatus</a> from powerstep01.o(i.Powerstep01_CmdGetStatus) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[9]">Powerstep01_CmdGoHome</a> from powerstep01.o(i.Powerstep01_CmdGoHome) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[a]">Powerstep01_CmdGoMark</a> from powerstep01.o(i.Powerstep01_CmdGoMark) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[b]">Powerstep01_CmdGoTo</a> from powerstep01.o(i.Powerstep01_CmdGoTo) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[19]">Powerstep01_CmdGoToDir</a> from powerstep01.o(i.Powerstep01_CmdGoToDir) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1c]">Powerstep01_CmdGoUntil</a> from powerstep01.o(i.Powerstep01_CmdGoUntil) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1d]">Powerstep01_CmdHardHiZ</a> from powerstep01.o(i.Powerstep01_CmdHardHiZ) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[c]">Powerstep01_CmdHardStop</a> from powerstep01.o(i.Powerstep01_CmdHardStop) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[d]">Powerstep01_CmdMove</a> from powerstep01.o(i.Powerstep01_CmdMove) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[13]">Powerstep01_CmdNop</a> from powerstep01.o(i.Powerstep01_CmdNop) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1e]">Powerstep01_CmdReleaseSw</a> from powerstep01.o(i.Powerstep01_CmdReleaseSw) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1f]">Powerstep01_CmdResetDevice</a> from powerstep01.o(i.Powerstep01_CmdResetDevice) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[20]">Powerstep01_CmdResetPos</a> from powerstep01.o(i.Powerstep01_CmdResetPos) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[21]">Powerstep01_CmdRun</a> from powerstep01.o(i.Powerstep01_CmdRun) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[14]">Powerstep01_CmdSetParam</a> from powerstep01.o(i.Powerstep01_CmdSetParam) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[22]">Powerstep01_CmdSoftHiZ</a> from powerstep01.o(i.Powerstep01_CmdSoftHiZ) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2d]">Powerstep01_CmdSoftStop</a> from powerstep01.o(i.Powerstep01_CmdSoftStop) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[23]">Powerstep01_CmdStepClock</a> from powerstep01.o(i.Powerstep01_CmdStepClock) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2b]">Powerstep01_ErrorHandler</a> from powerstep01.o(i.Powerstep01_ErrorHandler) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[24]">Powerstep01_FetchAndClearAllStatus</a> from powerstep01.o(i.Powerstep01_FetchAndClearAllStatus) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[5]">Powerstep01_FlagInterruptHandler</a> from powerstep01.o(i.Powerstep01_FlagInterruptHandler) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[32]">Powerstep01_GetAnalogValue</a> from powerstep01.o(i.Powerstep01_GetAnalogValue) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[25]">Powerstep01_GetFetchedStatus</a> from powerstep01.o(i.Powerstep01_GetFetchedStatus) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[6]">Powerstep01_GetFwVersion</a> from powerstep01.o(i.Powerstep01_GetFwVersion) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[7]">Powerstep01_GetMark</a> from powerstep01.o(i.Powerstep01_GetMark) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[26]">Powerstep01_GetNbDevices</a> from powerstep01.o(i.Powerstep01_GetNbDevices) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[8]">Powerstep01_GetPosition</a> from powerstep01.o(i.Powerstep01_GetPosition) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[0]">Powerstep01_Init</a> from powerstep01.o(i.Powerstep01_Init) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[27]">Powerstep01_IsDeviceBusy</a> from powerstep01.o(i.Powerstep01_IsDeviceBusy) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[29]">Powerstep01_QueueCommands</a> from powerstep01.o(i.Powerstep01_QueueCommands) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[1]">Powerstep01_ReadId</a> from powerstep01.o(i.Powerstep01_ReadId) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[15]">Powerstep01_ReadStatusRegister</a> from powerstep01.o(i.Powerstep01_ReadStatusRegister) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[16]">Powerstep01_ReleaseReset</a> from powerstep01.o(i.Powerstep01_ReleaseReset) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[17]">Powerstep01_Reset</a> from powerstep01.o(i.Powerstep01_Reset) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[18]">Powerstep01_SelectStepMode</a> from powerstep01.o(i.Powerstep01_SelectStepMode) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[28]">Powerstep01_SendQueuedCommands</a> from powerstep01.o(i.Powerstep01_SendQueuedCommands) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[31]">Powerstep01_SetAnalogValue</a> from powerstep01.o(i.Powerstep01_SetAnalogValue) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[e]">Powerstep01_SetHome</a> from powerstep01.o(i.Powerstep01_SetHome) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[f]">Powerstep01_SetMark</a> from powerstep01.o(i.Powerstep01_SetMark) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[30]">Powerstep01_SetNbDevices</a> from powerstep01.o(i.Powerstep01_SetNbDevices) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2e]">Powerstep01_StartStepClock</a> from powerstep01.o(i.Powerstep01_StartStepClock) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2f]">Powerstep01_StopStepClock</a> from powerstep01.o(i.Powerstep01_StopStepClock) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[2a]">Powerstep01_WaitForAllDevicesNotBusy</a> from powerstep01.o(i.Powerstep01_WaitForAllDevicesNotBusy) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[10]">Powerstep01_WaitWhileActive</a> from powerstep01.o(i.Powerstep01_WaitWhileActive) referenced 2 times from powerstep01.o(.data)
 <LI><a href="#[4a]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6e]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[76]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[68]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[69]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[78]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[82]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[47]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5d]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[60]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5f]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5e]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[61]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[62]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[63]">TIM4_IRQHandler</a> from usmart.o(i.TIM4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[77]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7b]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7c]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[70]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[73]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[72]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[71]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[79]">UART4_IRQHandler</a> from uart4.o(i.UART4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7a]">UART5_IRQHandler</a> from uart5.o(i.UART5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6a]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6b]">USART2_IRQHandler</a> from uart2.o(i.USART2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6c]">USART3_IRQHandler</a> from uart3.o(i.USART3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6f]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[58]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[59]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[83]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[35]">delay_ms</a> from delay.o(i.delay_ms) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[36]">delay_us</a> from delay.o(i.delay_us) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[84]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[81]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[33]">read_addr</a> from usmart.o(i.read_addr) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[38]">usmart_cmd_rec</a> from usmart.o(i.usmart_cmd_rec) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[39]">usmart_exe</a> from usmart.o(i.usmart_exe) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[37]">usmart_init</a> from usmart.o(i.usmart_init) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[3a]">usmart_scan</a> from usmart.o(i.usmart_scan) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[34]">write_addr</a> from usmart.o(i.write_addr) referenced 2 times from usmart_config.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[83]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[85]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[134]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[135]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[136]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[137]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[138]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[139]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_device
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Real_Time_Polling_Init
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_RegVal_to_Comp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_RegVal_to_Steps_s
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RegVal_to_RefVoltage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_RegVal_to_Th
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Speed_RegVal_to_Steps_s
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_RegVal_to_Steps_s
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_RegVal_to_Steps_s
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_RegVal_to_Perc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_RegVal_to_Steps_s
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_RegVal_to_Steps_s
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_RegVal_to_Perc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_RegVal_to_Steps_s2
</UL>

<P><STRONG><a name="[104]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_RegVal_to_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_RegVal_to_Comp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
</UL>

<P><STRONG><a name="[142]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RegVal_to_RefVoltage
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_RegVal_to_Time
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_RegVal_to_Th
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Speed_RegVal_to_Steps_s
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_RegVal_to_Steps_s
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_RegVal_to_Steps_s
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_RegVal_to_Perc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_RegVal_to_Comp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_RegVal_to_Steps_s
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_RegVal_to_Steps_s
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_RegVal_to_Perc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_RegVal_to_Steps_s2
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[144]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[145]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[8b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[93]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[92]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[147]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>BSP_MotorControl_BusyInterruptHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_BusyInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[9f]"></a>BSP_MotorControl_ErrorHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_ErrorHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_FlagInterruptHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_BusyInterruptHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Init
</UL>

<P><STRONG><a name="[a0]"></a>BSP_MotorControl_FlagInterruptHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_FlagInterruptHandler))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[a1]"></a>BSP_MotorControl_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_Init))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[a2]"></a>BSP_MotorControl_SetNbDevices</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, x_nucleo_ihmxx.o(i.BSP_MotorControl_SetNbDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_MotorControl_SetNbDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetMotorHandle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l648x_GetMotorHandle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l647x_GetMotorHandle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stspin240_250_GetMotorHandle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stspin220_GetMotorHandle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L6474_GetMotorHandle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L6208_GetMotorHandle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L6206_GetMotorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[ab]"></a>BSP_Motor_Control_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, step01.o(i.BSP_Motor_Control_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_Motor_Control_Init &rArr; Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStep_Select_Motor_Baby
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motor_device
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMotorAllDevice
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Config
</UL>

<P><STRONG><a name="[3f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>Check_Board_Define_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.Check_Board_Define_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Check_Board_Define_Config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>ConfigMotorAllDevice</STRONG> (Thumb, 444 bytes, Stack size 36 bytes, step01.o(i.ConfigMotorAllDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ConfigMotorAllDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[42]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>Electromagnetic_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, electromagnetic.o(i.Electromagnetic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Electromagnetic_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Config
</UL>

<P><STRONG><a name="[b7]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Delay
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_msp.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_FlagInterruptHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_BusyInterruptHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_cs_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Electromagnetic_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_FLAG_PIN_GetState
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_BUSY_PIN_GetState
</UL>

<P><STRONG><a name="[b5]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiWriteBytes
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Reset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_ReleaseReset_All
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_ReleaseReset
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_cs_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Electromagnetic_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Reset_All
</UL>

<P><STRONG><a name="[b8]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[10f]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[116]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[115]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StartStepClock
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1402 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiInit
</UL>

<P><STRONG><a name="[c6]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, stm32f1xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiWriteBytes
</UL>

<P><STRONG><a name="[122]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StartStepClock
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StopStepClock
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_UART_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_UART_Receive</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[d2]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>Init_Board_Config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.Init_Board_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Init_Board_Config &rArr; BSP_Motor_Control_Init &rArr; Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Config_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Sensor_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Electromagnetic_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>L6206_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.L6206_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[a7]"></a>L6208_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.L6208_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[a3]"></a>L6474_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.L6474_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[dc]"></a>Light_Sensor_Init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, light.o(i.Light_Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Light_Sensor_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Config
</UL>

<P><STRONG><a name="[3e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>PowerStep_Select_Motor_Baby</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.PowerStep_Select_Motor_Baby))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[dd]"></a>Powerstep01_AccDec_RegVal_to_Steps_s2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_AccDec_RegVal_to_Steps_s2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_AccDec_RegVal_to_Steps_s2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[df]"></a>Powerstep01_AccDec_Steps_s2_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_AccDec_Steps_s2_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_AccDec_Steps_s2_to_RegVal &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[4]"></a>Powerstep01_AttachBusyInterrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_AttachBusyInterrupt))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Powerstep01_AttachErrorHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_AttachErrorHandler))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Powerstep01_AttachFlagInterrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_AttachFlagInterrupt))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>Powerstep01_BEMFslope_Perc_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_BEMFslope_Perc_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_BEMFslope_Perc_to_RegVal &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[e2]"></a>Powerstep01_BEMFslope_RegVal_to_Perc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_BEMFslope_RegVal_to_Perc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_BEMFslope_RegVal_to_Perc &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[e3]"></a>Powerstep01_Board_BUSY_PIN_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_BUSY_PIN_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CheckBusyHw
</UL>

<P><STRONG><a name="[e5]"></a>Powerstep01_Board_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_Board_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init
</UL>

<P><STRONG><a name="[f1]"></a>Powerstep01_Board_DisableIrq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_DisableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetStatus
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>

<P><STRONG><a name="[f0]"></a>Powerstep01_Board_EnableIrq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetStatus
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>

<P><STRONG><a name="[e6]"></a>Powerstep01_Board_FLAG_PIN_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_FLAG_PIN_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CheckStatusHw
</UL>

<P><STRONG><a name="[e7]"></a>Powerstep01_Board_GpioInit</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Powerstep01_Board_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Reset_All
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init
</UL>

<P><STRONG><a name="[e9]"></a>Powerstep01_Board_ReleaseReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_ReleaseReset))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ReleaseReset
</UL>

<P><STRONG><a name="[ea]"></a>Powerstep01_Board_ReleaseReset_All</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_ReleaseReset_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_Board_ReleaseReset_All
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init
</UL>

<P><STRONG><a name="[eb]"></a>Powerstep01_Board_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Reset
</UL>

<P><STRONG><a name="[e8]"></a>Powerstep01_Board_Reset_All</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_Reset_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_Board_Reset_All
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
</UL>

<P><STRONG><a name="[ec]"></a>Powerstep01_Board_SpiInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Powerstep01_Board_SpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init
</UL>

<P><STRONG><a name="[ed]"></a>Powerstep01_Board_SpiWriteBytes</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_SpiWriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>

<P><STRONG><a name="[ee]"></a>Powerstep01_Board_StartStepClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_StartStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Powerstep01_Board_StartStepClock &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StartStepClock
</UL>

<P><STRONG><a name="[ef]"></a>Powerstep01_Board_StopStepClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x_nucleo_ihm03a1_stm32f1xx.o(i.Powerstep01_Board_StopStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_Board_StopStepClock &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StopStepClock
</UL>

<P><STRONG><a name="[2c]"></a>Powerstep01_BusyInterruptHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_BusyInterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_BusyInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>Powerstep01_CheckBusyHw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_CheckBusyHw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_CheckBusyHw
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_BUSY_PIN_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>Powerstep01_CheckStatusHw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_CheckStatusHw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_CheckStatusHw
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_FLAG_PIN_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Powerstep01_CmdGetParam</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, powerstep01.o(i.Powerstep01_CmdGetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_EnableIrq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_DisableIrq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetHome
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SelectStepMode
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ReadStatusRegister
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetPosition
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetMark
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Powerstep01_CmdGetStatus</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, powerstep01.o(i.Powerstep01_CmdGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Powerstep01_CmdGetStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_EnableIrq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_DisableIrq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IsDeviceBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Powerstep01_CmdGoHome</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoHome &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Powerstep01_CmdGoMark</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoMark &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Powerstep01_CmdGoTo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoTo &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Powerstep01_CmdGoToDir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoToDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoToDir &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Powerstep01_CmdGoUntil</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdGoUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdGoUntil &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>Powerstep01_CmdHardHiZ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdHardHiZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdHardHiZ &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SelectStepMode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Powerstep01_CmdHardStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdHardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdHardStop &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Powerstep01_CmdMove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdMove &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Powerstep01_CmdNop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdNop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdNop &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>Powerstep01_CmdReleaseSw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdReleaseSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdReleaseSw &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>Powerstep01_CmdResetDevice</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdResetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdResetDevice &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>Powerstep01_CmdResetPos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdResetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdResetPos &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SelectStepMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Powerstep01_CmdRun</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdRun &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Powerstep01_CmdSetParam</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, powerstep01.o(i.Powerstep01_CmdSetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_EnableIrq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_DisableIrq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetMark
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetHome
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SelectStepMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>Powerstep01_CmdSoftHiZ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdSoftHiZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdSoftHiZ &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>Powerstep01_CmdSoftStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdSoftStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdSoftStop &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>Powerstep01_CmdStepClock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_CmdStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_CmdStepClock &rArr; Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>Powerstep01_ConvertPosition</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_ConvertPosition))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetPosition
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetMark
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[2b]"></a>Powerstep01_ErrorHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_ErrorHandler))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>Powerstep01_FSSpd_RegVal_to_Steps_s</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_FSSpd_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_FSSpd_RegVal_to_Steps_s &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[f5]"></a>Powerstep01_FSSpd_Steps_s_to_RegVal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_FSSpd_Steps_s_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_FSSpd_Steps_s_to_RegVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[24]"></a>Powerstep01_FetchAndClearAllStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_FetchAndClearAllStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Powerstep01_FetchAndClearAllStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Powerstep01_FlagInterruptHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_FlagInterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_FlagInterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>Powerstep01_GetAnalogValue</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_GetAnalogValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Powerstep01_GetAnalogValue &rArr; Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RegVal_to_RefVoltage
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_RegVal_to_Time
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_RegVal_to_Th
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Speed_RegVal_to_Steps_s
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_RegVal_to_Steps_s
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_RegVal_to_Steps_s
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_RegVal_to_Perc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_RegVal_to_Comp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_RegVal_to_Steps_s
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_RegVal_to_Steps_s
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ConvertPosition
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_RegVal_to_Perc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_RegVal_to_Steps_s2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>Powerstep01_GetFetchedStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_GetFetchedStatus))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Powerstep01_GetFwVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_GetFwVersion))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Powerstep01_GetMark</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_GetMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Powerstep01_GetMark &rArr; Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ConvertPosition
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>Powerstep01_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[26]"></a>Powerstep01_GetNbDevices</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_GetNbDevices))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Powerstep01_GetPosition</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_GetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Powerstep01_GetPosition &rArr; Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_ConvertPosition
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>Powerstep01_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Powerstep01_Init &rArr; Powerstep01_Board_SpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_ReleaseReset_All
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_GpioInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>Powerstep01_Init_Register</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Init_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FetchAndClearAllStatus
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdHardHiZ
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[fa]"></a>Powerstep01_IntSpd_RegVal_to_Steps_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_IntSpd_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_IntSpd_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[102]"></a>Powerstep01_IntSpd_Steps_s_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_IntSpd_Steps_s_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_IntSpd_Steps_s_to_RegVal &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[27]"></a>Powerstep01_IsDeviceBusy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_IsDeviceBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Powerstep01_IsDeviceBusy &rArr; Powerstep01_CmdGetStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WaitWhileActive
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WaitForAllDevicesNotBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>Powerstep01_KTherm_Comp_to_RegVal</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_KTherm_Comp_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_KTherm_Comp_to_RegVal &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[fb]"></a>Powerstep01_KTherm_RegVal_to_Comp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_KTherm_RegVal_to_Comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_KTherm_RegVal_to_Comp &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[105]"></a>Powerstep01_Kval_Perc_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Kval_Perc_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_Kval_Perc_to_RegVal &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[fd]"></a>Powerstep01_Kval_RegVal_to_Perc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Kval_RegVal_to_Perc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_Kval_RegVal_to_Perc &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[f8]"></a>Powerstep01_MaxSpd_RegVal_to_Steps_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_MaxSpd_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_MaxSpd_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[106]"></a>Powerstep01_MaxSpd_Steps_s_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_MaxSpd_Steps_s_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_MaxSpd_Steps_s_to_RegVal &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[f9]"></a>Powerstep01_MinSpd_RegVal_to_Steps_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_MinSpd_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_MinSpd_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[107]"></a>Powerstep01_MinSpd_Steps_s_to_RegVal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_MinSpd_Steps_s_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_MinSpd_Steps_s_to_RegVal &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[29]"></a>Powerstep01_QueueCommands</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_QueueCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Powerstep01_QueueCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>Powerstep01_ReadId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_ReadId))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Powerstep01_ReadStatusRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Powerstep01_ReadStatusRegister &rArr; Powerstep01_CmdGetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Powerstep01_ReleaseReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_ReleaseReset))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_ReleaseReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>Powerstep01_Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>Powerstep01_SelectStepMode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_SelectStepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Powerstep01_SelectStepMode &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdResetPos
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdHardHiZ
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>Powerstep01_SendCommand</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, powerstep01.o(i.Powerstep01_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_SendCommand &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_EnableIrq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_DisableIrq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdStepClock
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSoftStop
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSoftHiZ
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdRun
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdResetPos
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdResetDevice
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdReleaseSw
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdNop
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdMove
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdHardStop
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdHardHiZ
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoUntil
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoToDir
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoTo
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoMark
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGoHome
</UL>

<P><STRONG><a name="[28]"></a>Powerstep01_SendQueuedCommands</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_SendQueuedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Powerstep01_SendQueuedCommands &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_WriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>Powerstep01_SetAnalogValue</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, powerstep01.o(i.Powerstep01_SetAnalogValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Powerstep01_SetAnalogValue &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>Powerstep01_SetDeviceParamsToGivenValues</STRONG> (Thumb, 570 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_SetDeviceParamsToGivenValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Powerstep01_SetDeviceParamsToGivenValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tval_RefVoltage_to_RegVal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Tmin_Time_to_RegVal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
</UL>

<P><STRONG><a name="[e]"></a>Powerstep01_SetHome</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_SetHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Powerstep01_SetHome &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Powerstep01_SetMark</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_SetMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_SetMark &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>Powerstep01_SetNbDevices</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_SetNbDevices))
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>Powerstep01_SetRegisterToPredefinedValues</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, powerstep01.o(i.Powerstep01_SetRegisterToPredefinedValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_StallOcd_Th_to_RegVal
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MinSpd_Steps_s_to_RegVal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_MaxSpd_Steps_s_to_RegVal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Kval_Perc_to_RegVal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_KTherm_Comp_to_RegVal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IntSpd_Steps_s_to_RegVal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FSSpd_Steps_s_to_RegVal
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_BEMFslope_Perc_to_RegVal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_AccDec_Steps_s2_to_RegVal
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Init_Register
</UL>

<P><STRONG><a name="[f7]"></a>Powerstep01_Speed_RegVal_to_Steps_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Speed_RegVal_to_Steps_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_Speed_RegVal_to_Steps_s &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[fc]"></a>Powerstep01_StallOcd_RegVal_to_Th</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_StallOcd_RegVal_to_Th))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_StallOcd_RegVal_to_Th &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[109]"></a>Powerstep01_StallOcd_Th_to_RegVal</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_StallOcd_Th_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_StallOcd_Th_to_RegVal &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetRegisterToPredefinedValues
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[2e]"></a>Powerstep01_StartStepClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_StartStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Powerstep01_StartStepClock &rArr; Powerstep01_Board_StartStepClock &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StartStepClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>Powerstep01_StopStepClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powerstep01.o(i.Powerstep01_StopStepClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_StopStepClock &rArr; Powerstep01_Board_StopStepClock &rArr; HAL_TIM_PWM_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_StopStepClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>Powerstep01_Tmin_RegVal_to_Time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Tmin_RegVal_to_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Powerstep01_Tmin_RegVal_to_Time &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[10b]"></a>Powerstep01_Tmin_Time_to_RegVal</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Tmin_Time_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_Tmin_Time_to_RegVal &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[10a]"></a>Powerstep01_Tval_RefVoltage_to_RegVal</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Tval_RefVoltage_to_RegVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Powerstep01_Tval_RefVoltage_to_RegVal &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetDeviceParamsToGivenValues
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SetAnalogValue
</UL>

<P><STRONG><a name="[fe]"></a>Powerstep01_Tval_RegVal_to_RefVoltage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_Tval_RegVal_to_RefVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Powerstep01_Tval_RegVal_to_RefVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_GetAnalogValue
</UL>

<P><STRONG><a name="[2a]"></a>Powerstep01_WaitForAllDevicesNotBusy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, powerstep01.o(i.Powerstep01_WaitForAllDevicesNotBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Powerstep01_WaitForAllDevicesNotBusy &rArr; Powerstep01_IsDeviceBusy &rArr; Powerstep01_CmdGetStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IsDeviceBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Powerstep01_WaitWhileActive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_WaitWhileActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Powerstep01_WaitWhileActive &rArr; Powerstep01_IsDeviceBusy &rArr; Powerstep01_CmdGetStatus &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_IsDeviceBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerstep01.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>Powerstep01_WriteBytes</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, powerstep01.o(i.Powerstep01_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_Board_SpiWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendQueuedCommands
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_SendCommand
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_FetchAndClearAllStatus
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdSetParam
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetStatus
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Powerstep01_CmdGetParam
</UL>

<P><STRONG><a name="[10c]"></a>Real_Time_Polling_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, real_time_polling.o(i.Real_Time_Polling_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Real_Time_Polling_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>Stm32_Clock_Init</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Stspin220_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.Stspin220_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[aa]"></a>Stspin240_250_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.Stspin240_250_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[44]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>TIM4_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usmart.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(i.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[cd]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
</UL>

<P><STRONG><a name="[110]"></a>Timer4_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usmart.o(i.Timer4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer4_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_init
</UL>

<P><STRONG><a name="[112]"></a>UART2_Init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, uart2.o(i.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART2_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Config_Init
</UL>

<P><STRONG><a name="[79]"></a>UART4_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart4.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>UART4_Init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, uart4.o(i.UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>UART5_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart5.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USART1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USART2_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USART3_IRQHandler</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, uart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Uart2_Config_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_config.o(i.Uart2_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Uart2_Config_Init &rArr; UART2_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_cs_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Config
</UL>

<P><STRONG><a name="[119]"></a>Uart_cs_init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, uart_choose.o(i.Uart_cs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Uart_cs_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Config_Init
</UL>

<P><STRONG><a name="[40]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14a]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b1]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Board_Define_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[14b]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[14c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[14d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[14e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[121]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[ad]"></a>init_motor_device</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, step01.o(i.init_motor_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_motor_device &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Control_Init
</UL>

<P><STRONG><a name="[a6]"></a>l647x_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.l647x_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[a9]"></a>l648x_GetMotorHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_ihmxx.o(i.l648x_GetMotorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MotorControl_SetNbDevices
</UL>

<P><STRONG><a name="[81]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; Init_Board_Config &rArr; BSP_Motor_Control_Init &rArr; Powerstep01_Init_Register &rArr; Powerstep01_SetRegisterToPredefinedValues &rArr; Powerstep01_CmdSetParam &rArr; Powerstep01_WriteBytes &rArr; Powerstep01_Board_SpiWriteBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Real_Time_Polling_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Board_Define_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[33]"></a>read_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.read_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[124]"></a>uart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>usmart_cmd_rec</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, usmart.o(i.usmart_cmd_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>usmart_exe</STRONG> (Thumb, 510 bytes, Stack size 128 bytes, usmart.o(i.usmart_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usmart_exe &rArr; usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_reset_runtime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_runtime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>usmart_get_aparm</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, usmart_str.o(i.usmart_get_aparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[132]"></a>usmart_get_cmdname</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usmart_str.o(i.usmart_get_cmdname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[125]"></a>usmart_get_fname</STRONG> (Thumb, 352 bytes, Stack size 60 bytes, usmart_str.o(i.usmart_get_fname))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[127]"></a>usmart_get_fparam</STRONG> (Thumb, 202 bytes, Stack size 240 bytes, usmart_str.o(i.usmart_get_fparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[128]"></a>usmart_get_parmpos</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usmart_str.o(i.usmart_get_parmpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_parmpos
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[12a]"></a>usmart_get_runtime</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usmart.o(i.usmart_get_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[37]"></a>usmart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usmart.o(i.usmart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usmart_init &rArr; Timer4_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[131]"></a>usmart_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_pow))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[129]"></a>usmart_reset_runtime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usmart.o(i.usmart_reset_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[3a]"></a>usmart_scan</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usmart.o(i.usmart_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[12b]"></a>usmart_search_nextc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_search_nextc))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[12d]"></a>usmart_str2num</STRONG> (Thumb, 214 bytes, Stack size 28 bytes, usmart_str.o(i.usmart_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[126]"></a>usmart_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcmp))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[12f]"></a>usmart_strcopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcopy))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[12e]"></a>usmart_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[130]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 1458 bytes, Stack size 72 bytes, usmart.o(i.usmart_sys_cmd_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = usmart_sys_cmd_exe &rArr; usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[34]"></a>write_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.write_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c1]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d0]"></a>UART_Receive_IT</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d1]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[c8]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[11c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11b]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[11f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
